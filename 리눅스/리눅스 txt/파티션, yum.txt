vi 패키지 설치

윈도우에서 vim 패키지 5개를 Centos 홈페이지에서 다운받은 후 FTP를 이용해서 리눅스에
업로드합니다

# cd /home/samadal/
# ls -l /home/samadal/
합계 8812
-rw-r--r-- 1 samadal samadal 1239528  3월 12 10:45 vim-X11-7.4.629-6.el7.x86_64.rpm
-rw-r--r-- 1 samadal samadal 6207468  3월 12 10:45 vim-common-7.4.629-6.el7.x86_64.rpm
-rw-r--r-- 1 samadal samadal 1105752  3월 12 10:45 vim-enhanced-7.4.629-6.el7.x86_64.rpm
-rw-r--r-- 1 samadal samadal   11032  3월 12 10:45 vim-filesystem-7.4.629-6.el7.x86_64.rpm
-rw-r--r-- 1 samadal samadal  453628  3월 12 10:45 vim-minimal-7.4.629-6.el7.x86_64.rpm
#

vim 설치

# rpm -ivh vim-X11-7.4.629-6.el7.x86_64.rpm
오류: Failed dependencies:
        vim-common = 2:7.4.629-6.el7 is needed by vim-X11-2:7.4.629-6.el7.x86_64
# rpm -ivh vim-common-7.4.629-6.el7.x86_64.rpm
오류: Failed dependencies:
        vim-filesystem is needed by vim-common-2:7.4.629-6.el7.x86_64
# rpm -ivh vim-filesystem-7.4.629-6.el7.x86_64.rpm
준비 중...                         ################################# [100%]
Updating / installing...
   1:vim-filesystem-2:7.4.629-6.el7   ################################# [100%]
# rpm -ivh vim-common-7.4.629-6.el7.x86_64.rpm
준비 중...                         ################################# [100%]
Updating / installing...
   1:vim-common-2:7.4.629-6.el7       ################################# [100%]
# rpm -ivh vim-X11-7.4.629-6.el7.x86_64.rpm
준비 중...                         ################################# [100%]
Updating / installing...
   1:vim-X11-2:7.4.629-6.el7          ################################# [100%]
# rpm -ivh vim-enhanced-7.4.629-6.el7.x86_64.rpm
준비 중...                         ################################# [100%]
Updating / installing...
   1:vim-enhanced-2:7.4.629-6.el7     ################################# [100%]
# rpm -ivh vim-minimal-7.4.629-6.el7.x86_64.rpm
준비 중...                         ################################# [100%]
Updating / installing...
   1:vim-minimal-2:7.4.629-6.el7      ################################# [100%]
#

설치 확인

# rpm -qa | grep vim
vim-minimal-7.4.629-6.el7.x86_64
vim-common-7.4.629-6.el7.x86_64
vim-X11-7.4.629-6.el7.x86_64
vim-enhanced-7.4.629-6.el7.x86_64
vim-filesystem-7.4.629-6.el7.x86_64
#

===============================================================================

<rpm 설치 및 삭제할 때 주의사항>

1. 의존성 오류를 무시하고 설치를 진행하면 안됩니다
2. 의존성 오류를 제기한 패키지를 먼저 설치합니다
3. 패키지를 설치할 때 모든 패키지의 버전과 아키텍처를 동일하게 설치합니다
4. 가급적 --nodeps(의존성무시) 옵션을 사용하지 않습니다
ex) rpm -ivh vim-minimal-7.4.629-6.el7.x86_64.rpm --nodeps
5. 의존성문제를 제기한 패키지 이름이 패키지명(보조패키지명) 형태로 나오는 경우
   패키지명-보조패키지명 형태로 찾아봐야 합니다
   ex)vim(minimal) ---> vim-minimal
6. 의존성문제를 제기한 패키지 이름이 lib로 시작하는 경우가 있는데
   그런 패키지는 lib가 실제로 붙어있는 경우도 있고 lib를 빼고 쓰는 경우도 있기 때문에
   둘 다 찾아봐야 합니다
   ex) libvim-minimal
7. 의존성문제를 제기한 패키지 이름이 패키지명(아키텍처) 형태로 나오는 경우
   패키지명-.아키텍처 형태로 입력합니다
   ex) vim-minimal(x86_64) ---> vim-minimal-7.4.629-6.el7.x86_64

=============================================================================

패키지를 설치 할 때 ISO 파일을 사용해서 패키지를 설치할 수 있습니다
Vmware 에서 Centos iso(everything)을 삽입을 합니다
리눅스에서는 root로 접속까지 진행을 해야 합니다(VMware 안에서 진행)
iso를 삽입하면 리눅스 바탕화면에 CD모양에 아이콘이 생성이 됩니다
그 후 putty에서 아래 경로로 이동(Tab키 사용!)
# cd /run/media/root/CentOS\ 7\ x86_64/Packages

Packages 디렉터리 까지 들어가면 Centos 홈페이지에 있던 모든 패키지 들이 전부
들어있습니다 그래서 리눅스 iso 파일을 삽입하면 인터넷을 사용할 필요 없이 바로 패키지 설치가
가능합니다

============================================================================

mariadb 패키지 설치

mariadb 패키지 확인
아키텍처가 x86_64로 구성된 패키지만 설치합니다

# pwd
/run/media/root/CentOS 7 x86_64/Packages
# ls mariadb*x86* | nl
     1  mariadb-5.5.64-1.el7.x86_64.rpm
     2  mariadb-bench-5.5.64-1.el7.x86_64.rpm
     3  mariadb-devel-5.5.64-1.el7.x86_64.rpm
     4  mariadb-embedded-5.5.64-1.el7.x86_64.rpm
     5  mariadb-embedded-devel-5.5.64-1.el7.x86_64.rpm
     6  mariadb-libs-5.5.64-1.el7.x86_64.rpm
     7  mariadb-server-5.5.64-1.el7.x86_64.rpm
     8  mariadb-test-5.5.64-1.el7.x86_64.rpm
#

패키지 설치 확인
# rpm -qa | grep mariadb
mariadb-bench-5.5.64-1.el7.x86_64
mariadb-server-5.5.64-1.el7.x86_64
mariadb-embedded-5.5.64-1.el7.x86_64
mariadb-5.5.64-1.el7.x86_64
mariadb-embedded-devel-5.5.64-1.el7.x86_64
mariadb-libs-5.5.64-1.el7.x86_64
mariadb-devel-5.5.64-1.el7.x86_64
mariadb-test-5.5.64-1.el7.x86_64
#

===============================================================

yum 명령어

- yum 명령어는 외부 미러사이트에서 패키지를 받아서 자동으로 설치를 합니다
- rpm과 차이점은 패키지를 자동으로 설치하고 패키지 설치나 삭제할때 나오는
  의존성문제를 자동으로 해결하기 때문에 rpm보다 사용하기 편합니다
- 단점은 미러사이트에서 패키지를 다운받기 때문에 인터넷 연결이 불가능하다면 yun 사용에 제한이 될 수 있습니다

yum으로 패키지 설치

yum -y install bind-*

- -y 옵션은 패키지를 설치하는 과정에서 나오는 질문을 무조건 yes로 처리하는 옵션
-  install은 패키지를 설치 시 사용하는 옵션이며 그 뒤에 내가 설치하고 싶은 패키지
   이름을 입력합니다
- bind-* 는 패키지 이름이 bind로 시작하는 패키지를 전부 설치합니다

yum으로 패키지 삭제

yum -y remove bind

- remove는 패키지 삭제시 사용하는 옵션이며 그 뒤에 내가 삭제하고 싶은 패키지 이름을
  입력합니다 그러면 그 패키지와 의존성을 가지고 있는 패키지도 같이 삭제가 됩니다

================================================================================

HDD & Partition

HDD(Hard Disk Drive) = 데이터를 저장할 수 있는 공간(컴퓨터의 저장 공간)

Partition = 하드디스크를 논리적인 구역으로 분류한 공간
파티션을 사용하면 하드디스크의 공간을 효율적으로 분배할 수 있고 안전하게 사용할 수 있다는 장점이 있습니다

파티션의 종류

1. primary partition
- 주 파티션
- 가장 기본적인 파티션으로 일반적으로 많이 사용하는 기본 파티션 입니다
- 하나의 HDD에서 최대 4개 까지 생성할 수 있습니다

2. extended partiton
- 확장 파티션
- 논리 파티션을 만들기위해 미리 공간을 확보하는 용도로 사용하는 파티션
- 확장 파티션에 데이터를 저장할 수 없습니다
- 하나의 HDD에 1개만 생성할 수 있습니다

3. logical partition
- 논리 파티션
- 확장 파티션이 지정한 용량에서 생성할 수 있으며 파티션의 생성 개수에 제한이 없습니다
- 확장 파티션 용량에 따라서 자유롭게 구성할 수 있습니다

하드디스크 관리

리눅스에서 fdisk -l 명령어를 사용하면 현재 리눅스에서 사용하는 HDD와 파티션을 확인할 수 있습니다

실제로 리눅스에 추가된 HDD와 파티션은 /dev/ 디렉터리에 자동으로 생성이 됩니다
HDD의 타입에 따라서 sd 혹은 hd 로 분류합니다
sd = SCSI 타입
hd = IDE 타입(잘 사용하지 않음)

HDD에 들어있는 파티션은 HDD이름 + 숫자 형태로 표시합니다
ex) /dev/sda1 ---> sda 하드디스크에 1번 파티션을 의미합니다

<HDD의 정보확인 그리고 파티션 확인 명령어>

fdisk -l
- 현재 리눅스에 연결된 HDD와 파티션의 정보를 한번에 출력하는 명령어
ex) fdisk -l

fdisk -l /dev/HDD이름
- 특정 하드디스크 정보만 출력하는 명령어
ex) fdisk -l /dev/sdb

fdisk /dev/HDD이름
- 입력한 HDD에 파티션 생성 및 설정을 하기 위한 명령어
ex) fdisk /dev/sdb

===================================================

<파티션 생성>
Vmware를 통해서 가상의 1GB HDD(SCSI)를 추가하고 진행합니다

파티션을 생성하려면 fdisk /dev/HDD이름 형식으로 먼저 HDD에 접근을 합니다
명령어를 입력하면 프롬프트 모양이 바뀌는데 여기서부터 리눅스 명령어는 사용할 수 없습니다
ex) fdisk /dev/sdb

Command (m for help): 형식으로 프롬포트가 바뀌면 m을 눌러서 HDD설정에서 사용하는
다양한 명령어를 확인할 수 있습니다
Command (m for help): m

파티션 생성
Command (m for help): n
- n은 파티션을 새로 생성하는 명령어

Command (m for help): n
Partition type:
   p   primary (0 primary, 0 extended, 4 free)
   e   extended
Select (default p): p
Partition number (1-4, default 1): 1
- 파티션 번호

First sector (2048-2097151, default 2048):
- First sector는 HDD에서 파티션의 시작위치를 지정하는 항목입니다
  특별한 경우가 아니라면 기본값을 그대로 사용합니다
Using default value 2048

Last sector, +sectors or +size{K,M,G} (2048-2097151, default 2097151): +100MB
- Last sector가 파티션에 용량을 설정하는 항목입니다
  주소값을 사용해서 만들수도 있지만 주소값 보다 +size[K,M,G] 형태로 크기를 적는것이 사용하기
  훨씬 편합니다

Partition 1 of type Linux and of size 100 MiB is set

파티션 생성 후에 반드시 p 명령어를 통해서 정상적으로 생성했는지 확인합니다
파티션 설정이 끝나면 반드시 w 명령어를 사용해서 종료합니다 ctrl + c 를 사용하면
설정이 저장이 안되고 다시 작업을 해야합니다

=====================================================================

연습문제

주 파티션 100MB 4개를 생성합니다

실습
- 주 파티션은 최대 4개까지 생성이 가능하며 추가적으로 생성하려고 한다면 에러가 발생합니다
  HDD의 용량이 남아있어도 더 이상 확장파티션을 만들 수 없습니다
- 주 파티션과 확장 파티션이 1 ~ 4번 까지 파티션 번호를 사용하는데 주 파티션이 1 ~ 4를 전부
  사용하고 있기 때문에 확장 파티션을 생성할 수 없습니다
- 확장 파티션을 만들고 싶다면 1 ~ 4번 중 하나의 파티션 번호는 남아있어야 사용할 수 있습니다


Disk /dev/sdb: 10.7 GB, 10737418240 bytes, 20971520 sectors
Units = sectors of 1 * 512 = 512 bytes
Sector size (logical/physical): 512 bytes / 512 bytes
I/O size (minimum/optimal): 512 bytes / 512 bytes
Disk label type: dos
Disk identifier: 0xa2771641

   Device Boot      Start         End      Blocks   Id  System
/dev/sdb1            2048     1026047      97280    83  Linux
/dev/sdb2         1026048     2050047      97280    83  Linux
/dev/sdb3         2050048     3074047      97280    83  Linux
/dev/sdb4         3074048     4098047      97280    83  Linux

Command (m for help): n
If you want to create more than four partitions, you must replace a
primary partition with an extended partition first.


====================================================================================

파티션 생성을 하고 반드시 포맷을 해야 정상적으로 파티션을 사용할 수 있습니다
포맷은 파티션의 파일시스템을 지정하는 역할을 하며 파티션은 반드시 파일시스템이
설정이 되어있어야 사용할 수 있습니다
리눅스는 대표적으로 ext4 형태로 포맷을 합니다

파일시스템은 파일이나 디렉터리를 저장하고 관리하는 방법에 따라서 다양하게 지정할 수 있습니다

포맷 명령어
[사용형식]
mkfs.[파일시스템] [파티션경로]
ex) mkfs.ext4 /dev/sdb1

# mkfs.ext4 /dev/sdb1
mke2fs 1.42.9 (28-Dec-2013)
Filesystem label=
OS type: Linux
Block size=1024 (log=0)
Fragment size=1024 (log=0)
Stride=0 blocks, Stripe width=0 blocks
24384 inodes, 97280 blocks
4864 blocks (5.00%) reserved for the super user
First data block=1
Maximum filesystem blocks=33685504
12 block groups
8192 blocks per group, 8192 fragments per group
2032 inodes per group
Superblock backups stored on blocks:
        8193, 24577, 40961, 57345, 73729

Allocating group tables: done
Writing inode tables: done
Creating journal (4096 blocks): done
Writing superblocks and filesystem accounting information: done

확장 파티션은 포맷을 할 수 없습니다
포맷은 주 파티션, 논리 파티션 처럼 우리가 직접 데이터를 저장하고 사용하는 파티션만
포맷을 합니다

# mkfs.ext4 /dev/sdb4
mke2fs 1.42.9 (28-Dec-2013)
mkfs.ext4: inode_size (128) * inodes_count (0) too big for a
        filesystem with 0 blocks, specify higher inode_ratio (-i)
        or lower inode count (-N).

#

=====================================================================


파티션은 디렉터리나 문서파일이 아니라서 우리가 사용하는 cd,touch,ls 명령어 등을 사용할 수 없습니다
파티션을 포맷까지 했다면 그 파티션을 사용하기 위해서 반드시 마운트 작업을 진행을 해야합니다


